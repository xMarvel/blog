<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xMarvel&#39;s blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://xMarvel.github.io/"/>
  <updated>2018-03-11T23:01:28.413Z</updated>
  <id>https://xMarvel.github.io/</id>
  
  <author>
    <name>xMarvel team</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring data jpa 的使用(一)</title>
    <link href="https://xMarvel.github.io/2018/01/13/spring-data-jpa/"/>
    <id>https://xMarvel.github.io/2018/01/13/spring-data-jpa/</id>
    <published>2018-01-13T00:37:18.000Z</published>
    <updated>2018-03-11T23:01:28.413Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Data-Jpa-简介"><a href="#Spring-Data-Jpa-简介" class="headerlink" title="Spring Data Jpa 简介"></a>Spring Data Jpa 简介</h3><p>JPA 是Java president API的简称,是SUN官方提供持久化标准规范.<br>JPA 有多种实现如:Hibernate,SpringDataJPA,OpenJPA等.<br>Spring Data Jpa 是JPA规范的一种实现,和spring框架可以很好的整合.下面介绍一下在spring boot中的应用.</p><p>通常的CURD使用Spring Data 有以下几个步骤：</p><ol><li>声明一个扩展Repository或其子接口的接口,并将要处理的实体类和ID类型输入到该接口.</li><li>在接口上声明查询方法.</li><li>Spring boot 自动注入.</li><li>获取注入的资源库实例并使用它.<a id="more"></a></li></ol><p><strong>基于以上步骤,分几个方面进行项目演示:</strong><br><strong>1.利用Spring Data Jpa 库的基本方法演示.</strong><br><strong>2.对查询方法的自定义和相关扩展.</strong><br><strong>3.对接口的自定义和相关扩展.</strong><br><strong>4.Spring Data存储库的自定义实现</strong></p><p>本篇文章首先介绍一下上面步骤的前2点:</p><ul><li>1.利用Spring Data Jpa 库的基本方法演示.</li><li>2.对查询方法的自定义和相关扩展.</li></ul><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><ol><li><p>编辑build.gradle文件,增加Spring Data JPA 依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile &quot;org.springframework.boot:spring-boot-starter-data-jpa:$&#123;springBootVersion&#125;&quot;</span><br><span class="line">compile &quot;mysql:mysql-connector-java:5.1.39&quot;</span><br></pre></td></tr></table></figure></li><li><p>在Domain包内创建User实体类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">@Table(name = &quot;t_user&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue</span><br><span class="line">    private Long id;</span><br><span class="line">    private String userName;</span><br><span class="line">    private String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Entity 注解User类为JPA 实体</li><li>@Id 注解以便JPA将其识别为对象的ID</li><li>id属性也可以用@GeneratedValue注解,标识自动生成ID</li><li>@Table 用于指定实体映射的表名,缺省情况下默认使用类名作为映射的表名</li><li>@column 还可以使用该注解定义字段的属性.</li></ul></li><li><p>在repository包内创建接口文件 UserRepository 并继承CrudRepository</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public interface UserRepository extends CrudRepository&lt;User,Long&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>User 为实体类中User类型,Long为User类中指定的Id类型</li><li>Spring Data repository的核心接口是Repository,它需要使用Domain类的类型和Domain类中定义的id类型做为参数.</li><li>CrudRepository 是继承自Repository的接口, 提供了一些基本CRUD方法.</li><li>如果使用分页数据查询可以使用PagingAndSortingRepository.基于CrudRepository 上抽象一些额外的方法来简化分页查询.关于PagingAndSortingRepository的使用后期的文章再详细介绍.<br>CrudRepository接口中提供的方法主要有:<br><img src="CrudRepository.png" alt="CrudRepository"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(1) 保存给定的实体.</span><br><span class="line">(2) 保存给定的多个实体.</span><br><span class="line">(3) 返回给定id的实体.</span><br><span class="line">(4) 给定id的实体是否存在.</span><br><span class="line">(5) 返回所有实体.</span><br><span class="line">(6) 返回多个给定id的实体.</span><br><span class="line">(7) 返回实体的数量.</span><br><span class="line">(8) 删除给定id的实体.</span><br><span class="line">(9) 删除给定的实体.</span><br><span class="line">(10) 删除给定的多个实体.</span><br><span class="line">(11) 删除所有实体.</span><br></pre></td></tr></table></figure></li></ul></li><li><p>对接口的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    public void SaveUser(User user)&#123;</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>自动注入UserRepository userRepository;</li><li>直接调用 userRepository 实例中的</li></ul><p>对一些基本查询,存储库接口直接扩展Repository,CrudRepository或PagingAndSortingRepository 等即可直接使用.</p><h3 id="自定义查询"><a href="#自定义查询" class="headerlink" title="自定义查询"></a>自定义查询</h3><h4 id="定义查询方法"><a href="#定义查询方法" class="headerlink" title="定义查询方法"></a>定义查询方法</h4><p>CrudRepository提供的基本查询方法很多情况下是不能满足使用的,需要自定义查询.在UserRepository添加findUserById方法.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface UserRepository extends CrudRepository&lt;User, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    User findUserById(Long userId);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义查询根据方法名来自动生成Sql语句,语法主要为:<br>  find…By, read…By, query…By, count…By, and get…By</li><li>查询的属性间也可以用AND,OR,Between,LessThan,GreaterThan,Like等关键字连接.</li><li>方法解析器支持为单个属性（例如， findByLastnameIgnoreCase(…) ）或支持忽略大小写的类型（通常是String实例，例如findByLastnameAndFirstnameAllIgnoreCase(…) ）的所有属性设置IgnoreCase标志。 是否支持忽略情况可能因存储库而异。</li><li>如果需要排序,可以使用OrderBy并指定Asc或Desc</li><li>限制查询结果,可以使用first或top限制,也可以使用Distinct关键字.例如:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">interface PersonRepository extends Repository&lt;User, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">  List&lt;Person&gt; findByEmailAddressAndLastname(EmailAddress emailAddress, String lastname);</span><br><span class="line"></span><br><span class="line">  // Enables the distinct flag for the query</span><br><span class="line">  List&lt;Person&gt; findDistinctPeopleByLastnameOrFirstname(String lastname, String firstname);</span><br><span class="line">  List&lt;Person&gt; findPeopleDistinctByLastnameOrFirstname(String lastname, String firstname);</span><br><span class="line"></span><br><span class="line">  // Enabling ignoring case for an individual property</span><br><span class="line">  List&lt;Person&gt; findByLastnameIgnoreCase(String lastname);</span><br><span class="line">  // Enabling ignoring case for all suitable properties</span><br><span class="line">  List&lt;Person&gt; findByLastnameAndFirstnameAllIgnoreCase(String lastname, String firstname);</span><br><span class="line"></span><br><span class="line">  // Enabling static ORDER BY for a query</span><br><span class="line">  List&lt;Person&gt; findByLastnameOrderByFirstnameAsc(String lastname);</span><br><span class="line">  List&lt;Person&gt; findByLastnameOrderByFirstnameDesc(String lastname);</span><br><span class="line"></span><br><span class="line">  User findFirstByOrderByLastnameAsc();</span><br><span class="line"></span><br><span class="line">  User findTopByOrderByAgeDesc();</span><br><span class="line"></span><br><span class="line">  Page&lt;User&gt; queryFirst10ByLastname(String lastname, Pageable pageable);</span><br><span class="line"></span><br><span class="line">  Slice&lt;User&gt; findTop3ByLastname(String lastname, Pageable pageable);</span><br><span class="line"></span><br><span class="line">  List&lt;User&gt; findFirst10ByLastname(String lastname, Sort sort);</span><br><span class="line"></span><br><span class="line">  List&lt;User&gt; findTop10ByLastname(String lastname, Pageable pageable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附:<br><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation" target="_blank" rel="noopener">自定义方法中支持的关键字</a></p><h4 id="定义查询语句"><a href="#定义查询语句" class="headerlink" title="定义查询语句"></a>定义查询语句</h4><ul><li>还可以使用@Query 来定义查询.直接在@Query关键字后面定义查询语句,查询语句使用JPQL语法,如下例:查询的”表名”和”字段”是实体类的名称和属性.</li><li>查询语句中使用 ?1 占位参数值,多个参数顺序排列</li><li>如果要使用原生的sql语句需要指定参数nativeQuery=true</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface UserRepository extends JpaRepository&lt;User, Long&gt; &#123;</span><br><span class="line">     @Query(&quot;select u from User u where u.emailAddress = ?1&quot;)</span><br><span class="line">     User findByEmailAddress(String emailAddress);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p><a href="https://github.com/xMarvel/spring-data-jpa-demo-project" target="_blank" rel="noopener">示例代码</a></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/" target="_blank" rel="noopener">官网文档</a></p><p>关于</p><ul><li>3.对接口的自定义和相关扩展.</li><li>4.Spring Data存储库的自定义实现.</li></ul><p>这两点内容下一篇文章再进行介绍.</p><p>水平有限,如有纰漏欢迎指正.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Data-Jpa-简介&quot;&gt;&lt;a href=&quot;#Spring-Data-Jpa-简介&quot; class=&quot;headerlink&quot; title=&quot;Spring Data Jpa 简介&quot;&gt;&lt;/a&gt;Spring Data Jpa 简介&lt;/h3&gt;&lt;p&gt;JPA 是Java president API的简称,是SUN官方提供持久化标准规范.&lt;br&gt;JPA 有多种实现如:Hibernate,SpringDataJPA,OpenJPA等.&lt;br&gt;Spring Data Jpa 是JPA规范的一种实现,和spring框架可以很好的整合.下面介绍一下在spring boot中的应用.&lt;/p&gt;
&lt;p&gt;通常的CURD使用Spring Data 有以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;声明一个扩展Repository或其子接口的接口,并将要处理的实体类和ID类型输入到该接口.&lt;/li&gt;
&lt;li&gt;在接口上声明查询方法.&lt;/li&gt;
&lt;li&gt;Spring boot 自动注入.&lt;/li&gt;
&lt;li&gt;获取注入的资源库实例并使用它.
    
    </summary>
    
      <category term="spring boot" scheme="https://xMarvel.github.io/categories/spring-boot/"/>
    
    
      <category term="spring boot" scheme="https://xMarvel.github.io/tags/spring-boot/"/>
    
      <category term="jpa" scheme="https://xMarvel.github.io/tags/jpa/"/>
    
      <category term="spring data jpa" scheme="https://xMarvel.github.io/tags/spring-data-jpa/"/>
    
  </entry>
  
  <entry>
    <title>用Python快速创建spring boot项目</title>
    <link href="https://xMarvel.github.io/2018/01/02/spring-boot-gradle-python/"/>
    <id>https://xMarvel.github.io/2018/01/02/spring-boot-gradle-python/</id>
    <published>2018-01-02T09:00:23.000Z</published>
    <updated>2018-01-31T15:58:15.189Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建spring-boot项目的常规方式"><a href="#创建spring-boot项目的常规方式" class="headerlink" title="创建spring boot项目的常规方式"></a>创建spring boot项目的常规方式</h3><p>创建spring boot项目,一般有如下几种方式:</p><ol><li>使用start.spring.io,通过web界面工具实现</li><li>IDE 插件方式,通过IDE界面工具操作完成<ul><li>idea 自带的spring Initializr 插件</li><li>eclipse 的STS(Spring Tool Suite) 插件</li></ul></li><li>安装Spring boot CLI工具,通过命令行创建<a id="more"></a></li></ol><h3 id="常规方式遇到的问题"><a href="#常规方式遇到的问题" class="headerlink" title="常规方式遇到的问题"></a>常规方式遇到的问题</h3><p>以上几种方式底层实现都是基于start.spring.io提供的服务.所以最终效果是相似的.在使用过程中,遇到几个问题:</p><ul><li>没有生成 IDE 的项目文件，需要手动的将源代码导入到IDE中.<br>  如Intellij IDEA的 .ipr 工程文件、 .iml 模块文件、.iws 工作区文件, 使用.ipr可以直接打开项目.</li><li>自定义的配置需要重复添加,如私有的maven仓库地址、以及一些常用依赖项、插件等.</li><li>项目的构建需要基于IDE完成,但是IDE构建项目时经常出现缓存或是依赖项下载错误等原因导致的各种奇怪问题,所以可以用命令的形式进行项目构建编译等.从而摆脱IDE,仅把IDE作为编辑器使用.</li></ul><p>基于以上考虑,可以用Python脚本实现这些需求。</p><p>tips:本文程序基于Intellij IDEA、Python3.6和gradle4.0完成. Intellij IDEA、Python3.6和gradle4.0的安装请自行完成不再赘述.</p><h3 id="用Python脚本实现的思路"><a href="#用Python脚本实现的思路" class="headerlink" title="用Python脚本实现的思路"></a>用Python脚本实现的思路</h3><ol><li><p>根据输入项目名称artifact_id创建项目文件夹</p><ul><li>如果文件夹存在直接停止操作.</li></ul></li><li><p>执行gradle init 初始化gradle 项目的项目文件</p><ul><li>gradle init 命令主要初始化gradle项目配置文件 build.gradle 和  settings.gradle</li></ul></li><li><p>编辑build.gradle 设置插件、仓库地址,并增加常用依赖配置。</p><ul><li>build.gradle 增加使用了插件 java、gradle、idea(eclipse)</li><li>repositories 节点设置仓库地址.</li><li>依赖配置 dependencies 节点中配置项目中需要用到的外部引用.</li></ul></li><li><p>创建项目的基本目录结构、创建application.java并创建默认配置文件application.properties</p><ul><li>创建目录和文件<ul><li>src/main/java/包名(如com.xxx为两级目录 /com/xxx)</li><li>src/main/resources</li><li>src/test/java</li><li>src/test/resources</li></ul></li><li>创建Application.java</li><li>在src/main/resources下创建application.properties</li></ul></li><li><p>执行gradle idea(gradle eclipse)构建项目,并用idea打开项目</p><ul><li>gradle idea(gradle eclipse) 命令进行项目构建并生成基于IDE的项目文件(基于如Intellij idea的如<em>*</em>.ipr文件等) </li><li>直接双击.ipr 文件即可(MAC也可终端中执行open *.ipr)打开项目</li></ul></li></ol><h3 id="源码分享"><a href="#源码分享" class="headerlink" title="源码分享"></a>源码分享</h3><p><a href="https://github.com/xMarvel/init-gradle-idea-project" target="_blank" rel="noopener">源码下载</a></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python3 init-gradle-idea-project.py -g group_id -a artifact_id</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message <span class="keyword">and</span> exit</span><br><span class="line">  -g GROUP_ID, --group_id GROUP_ID   input group_id</span><br><span class="line">  -a ARTIFACT_ID, --artifact_id ARTIFACT_ID   input artifact_id</span><br></pre></td></tr></table></figure><p>-g 为 group_id<br>-a 为 artifact_id</p><p>创建项目：<br><img src="demo-project.png" alt="创建项目"></p><p>项目目录结构：<br><img src="demo-project-idea.png" alt="项目目录结构"></p><p>如有问题欢迎指正.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建spring-boot项目的常规方式&quot;&gt;&lt;a href=&quot;#创建spring-boot项目的常规方式&quot; class=&quot;headerlink&quot; title=&quot;创建spring boot项目的常规方式&quot;&gt;&lt;/a&gt;创建spring boot项目的常规方式&lt;/h3&gt;&lt;p&gt;创建spring boot项目,一般有如下几种方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用start.spring.io,通过web界面工具实现&lt;/li&gt;
&lt;li&gt;IDE 插件方式,通过IDE界面工具操作完成&lt;ul&gt;
&lt;li&gt;idea 自带的spring Initializr 插件&lt;/li&gt;
&lt;li&gt;eclipse 的STS(Spring Tool Suite) 插件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安装Spring boot CLI工具,通过命令行创建
    
    </summary>
    
      <category term="spring boot" scheme="https://xMarvel.github.io/categories/spring-boot/"/>
    
    
      <category term="gradle" scheme="https://xMarvel.github.io/tags/gradle/"/>
    
      <category term="spring boot" scheme="https://xMarvel.github.io/tags/spring-boot/"/>
    
      <category term="python" scheme="https://xMarvel.github.io/tags/python/"/>
    
      <category term="Intellij IDEA" scheme="https://xMarvel.github.io/tags/Intellij-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xMarvel.github.io/2018/01/01/hello-world/"/>
    <id>https://xMarvel.github.io/2018/01/01/hello-world/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-01-02T16:23:40.027Z</updated>
    
    <content type="html"><![CDATA[<p>你好，世界。</p><p>为了沉淀和培养知识体系，诞生了这个博客。在这里将会分享书籍、技术文章等内容。</p><p>第一篇文章将会简单记录下创建blog的步骤。<br>本blog是由hexo进行构建，主题采用的Next。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先需要有node环境以及npm。如果没有，<a href="https://nodejs.org/en/" target="_blank" rel="noopener">请戳</a></p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="安装Next主题"><a href="#安装Next主题" class="headerlink" title="安装Next主题"></a>安装Next主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h4 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h4><p>编辑<strong>_config.yml</strong>文件，更换主题。<br><code>theme: next</code></p><h3 id="开启RSS订阅"><a href="#开启RSS订阅" class="headerlink" title="开启RSS订阅"></a>开启RSS订阅</h3><p>在blog根目录下安装RSS插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure></p><h3 id="通过Git发布"><a href="#通过Git发布" class="headerlink" title="通过Git发布"></a>通过Git发布</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="新增文章"><a href="#新增文章" class="headerlink" title="新增文章"></a>新增文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>更多内容: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="本地服务器"><a href="#本地服务器" class="headerlink" title="本地服务器"></a>本地服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>更多内容: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="编译站点"><a href="#编译站点" class="headerlink" title="编译站点"></a>编译站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多内容: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="发布站点"><a href="#发布站点" class="headerlink" title="发布站点"></a>发布站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多内容: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你好，世界。&lt;/p&gt;
&lt;p&gt;为了沉淀和培养知识体系，诞生了这个博客。在这里将会分享书籍、技术文章等内容。&lt;/p&gt;
&lt;p&gt;第一篇文章将会简单记录下创建blog的步骤。&lt;br&gt;本blog是由hexo进行构建，主题采用的Next。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
